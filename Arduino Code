#include <NewPing.h>
#include <Servo.h>
#include <AFMotor.h>

// HC-SR04 Sensor
#define TRIGGER_PIN A5
#define ECHO_PIN A4
#define max_distance 50

// IR Sensor
#define irLeft A1
#define irRight A2

// Motor
#define MAX_SPEED 235
#define MAX_SPEED_OFFSET 20

Servo servo;

// Create NewPing object for distance sensor
NewPing sonar(TRIGGER_PIN, ECHO_PIN, max_distance);

// Motors (only two motors)
AF_DCMotor motor1(1, MOTOR12_1KHZ);  // Left Motor
AF_DCMotor motor2(2, MOTOR12_1KHZ);  // Right Motor

int distance = 0;
int leftDistance;
int rightDistance;

boolean object;

void setup() {
  Serial.begin(9600);
  pinMode(irLeft, INPUT);
  pinMode(irRight, INPUT);
  servo.attach(10);
  servo.write(90);  // Initialize servo to middle position

  // Set motor speed
  motor1.setSpeed(235);
  motor2.setSpeed(235);
}

void loop() {
  // Check if both IR sensors are detecting white (no line detected)
  if (digitalRead(irLeft) == 1 && digitalRead(irRight) == 1) {
    objectAvoid();  // Call object avoidance function if no line detected
  }
  else if (digitalRead(irLeft) == 0 && digitalRead(irRight) == 1) {
    // Left sensor detects black (line), right sensor detects white
    moveRight();  // Reversed turn direction
  }
  else if (digitalRead(irLeft) == 1 && digitalRead(irRight) == 0) {
    // Right sensor detects black (line), left sensor detects white
    moveLeft();   // Reversed turn direction
  }
  else if (digitalRead(irLeft) == 0 && digitalRead(irRight) == 0) {
    // Both sensors detect black (line detected under both sensors)
    Stop();
  }
}

void objectAvoid() {
  distance = getDistance();  // Get the current distance reading
  if (distance <= 15) {
    // Stop if an object is detected within 15 cm
    Stop();
    Serial.println("Stop - Object Detected");

    // Look left and right to check for the best direction
    lookLeft();
    lookRight();
    delay(100);

    // If the right side is clearer, move left
    if (rightDistance <= leftDistance) {
      object = true;
      turn();
      Serial.println("Move Left");
    } else {
      object = false;
      turn();
      Serial.println("Move Right");
    }
    delay(100);
  }
  else {
    // Move forward if no obstacle detected
    Serial.println("Move Forward");
    moveForward();
  }
}

int getDistance() {
  delay(50);  // Small delay before taking a reading
  int cm = sonar.ping_cm();
  if (cm == 0) {
    cm = 100;  // Return a large value if no distance is detected
  }
  return cm;
}

int lookLeft() {
  // Look to the left
  servo.write(150);
  delay(500);
  leftDistance = getDistance();
  delay(100);
  servo.write(90);  // Reset to center position
  Serial.print("Left: ");
  Serial.println(leftDistance);
  return leftDistance;
}

int lookRight() {
  // Look to the right
  servo.write(30);
  delay(500);
  rightDistance = getDistance();
  delay(100);
  servo.write(90);  // Reset to center position
  Serial.print("Right: ");
  Serial.println(rightDistance);
  return rightDistance;
}

void moveForward() {
  motor1.run(FORWARD);  // Move left motor forward
  motor2.run(FORWARD);  // Move right motor forward
}

void moveBackward() {
  motor1.run(BACKWARD);  // Move left motor backward
  motor2.run(BACKWARD);  // Move right motor backward
}

void moveLeft() {
  motor1.run(FORWARD);   // Left motor forward (reversed direction)
  motor2.run(BACKWARD);  // Right motor backward
}

void moveRight() {
  motor1.run(BACKWARD);  // Left motor backward (reversed direction)
  motor2.run(FORWARD);   // Right motor forward
}

void Stop() {
  motor1.run(RELEASE);  // Stop left motor
  motor2.run(RELEASE);  // Stop right motor
}

void turn() {
  if (object == false) {
    Serial.println("Turn Right");
    moveRight();
    delay(700);
    moveForward();
    delay(800);
    moveLeft();
    delay(900);
  }
  else {
    Serial.println("Turn Left");
    moveLeft();
    delay(700);
    moveForward();
    delay(800);
    moveRight();
    delay(900);
  }
}
